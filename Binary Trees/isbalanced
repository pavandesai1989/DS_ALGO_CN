#include "BinaryTreeNode.h"
#include<iostream>
#include<queue>
using namespace std;


//O(N*N)
int height(BinaryTreeNode<int> *root)
{
    if(!root) return 0;
   
    return 1 + height(root->left) + height(root->right);

}

bool isBalanced(BinaryTreeNode<int> *root) 
{
   int lh; /* for height of left subtree */
    int rh; /* for height of right subtree */
 
    /* If tree is empty then return true */
    if (root == NULL)
        return 1;
 
    /* Get the height of left and right sub trees */
    lh = height(root->left);
    rh = height(root->right);
 
    if (abs(lh - rh) <= 1 && isBalanced(root->left) && isBalanced(root->right))
        return 1;
 
    /* If we reach here then
    tree is not height-balanced */
    return 0;
}


//O(N) solution
int getheight(BinaryTreeNode<int> *root)
{
	if (!root) return 0;

	int leftheight = getheight(root->left);
	int rightheight = getheight(root->right);

	if (abs(leftheight - rightheight) > 1)  return -1;

	return 1 + leftheight + rightheight;

}

bool isBalanced(BinaryTreeNode<int> *root)
{
	if (getheight(root) == -1)
		return false;
	else
		return true;
}
