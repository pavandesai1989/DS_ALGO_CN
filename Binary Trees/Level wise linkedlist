#include "BinaryTreeNode.h"
#include<iostream>
#include<queue>
using namespace std;

template <typename T>
class Node {
public:
	T data;
	Node<T> *next;
	Node(T data) {
		this->data = data;
		this->next = NULL;
	}
};


void takeInput(Node<int>*& head, Node<int>*& tail, int data)
{
	if (!head)
	{
		head = new Node<int>(data);
		tail = head;
	}
	else
	{
		Node<int>* newnode = new Node<int>(data);
		tail->next = newnode;
		tail = newnode;
	}
}

vector<Node<int>*> constructLinkedListForEachLevel(BinaryTreeNode<int> *root)
{
	vector<Node<int>*> resVec;
	if (!root)  return resVec;

	queue<BinaryTreeNode<int>*>  pendingnodes;
	pendingnodes.push(root);
	pendingnodes.push(NULL);

	Node<int>* head = NULL;
	Node<int>* tail = NULL;

	while (!pendingnodes.empty())
	{
		BinaryTreeNode<int>* front = pendingnodes.front();

		if (front != NULL)
		{
			//create a link list
			bool IsHead = true;
			takeInput(head, tail, front->data);
			pendingnodes.pop();

			//create node and link        

			if (front->left)
				pendingnodes.push(front->left);

			if (front->right)
				pendingnodes.push(front->right);
		}
		else
		{
			pendingnodes.pop();

			if (!pendingnodes.empty())
				pendingnodes.push(NULL);
			cout << endl;
			resVec.push_back(head);
			head = NULL;

		}
	}

	return resVec;
}
